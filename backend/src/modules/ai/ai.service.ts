import { Injectable } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { GEMINI_API_KEY } from 'src/common/constant/app.constant';

function extractJson(content: string): any {
  const cleaned = content
    .replace(/```json/gi, '')
    .replace(/```/g, '')
    .trim();

  try {
    return JSON.parse(cleaned);
  } catch (err) {
    throw new Error('Gemini tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ph·∫£i JSON h·ª£p l·ªá: ' + cleaned);
  }
}

@Injectable()
export class AiService {
  private genAI: GoogleGenerativeAI;

  constructor() {
    this.genAI = new GoogleGenerativeAI(GEMINI_API_KEY!);
  }

  async parseNaturalInput(text: string) {
    const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

    const prompt = `
    B·∫°n l√† AI parser, lu√¥n tr·∫£ v·ªÅ JSON h·ª£p l·ªá.
    Ph√¢n t√≠ch n·ªôi dung sau th√†nh JSON v·ªõi c√°c field: 
    { "title": string, "deadline": ISO8601, "priority": "LOW"|"MEDIUM"|"HIGH", "description": string }
    Text: "${text}"
    `;

    const res = await model.generateContent(prompt);
    return extractJson(res.response.text());
  }

  // üü¢ Rewrite nhi·ªÅu task
  async rewriteTasks(tasks: any[]) {
    if (!tasks.length) return [];

    const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

    const prompt = `
    B·∫°n l√† AI h·ªó tr·ª£ vi·∫øt l·∫°i danh s√°ch task ƒë·ªÉ r√µ r√†ng v√† s√∫c t√≠ch h∆°n.
    Lu√¥n tr·∫£ v·ªÅ JSON h·ª£p l·ªá.
    Vi·∫øt l·∫°i to√†n b·ªô danh s√°ch task n√†y th√†nh JSON array. 
    M·ªói task c√≥ c√°c field: { "title": string, "description": string }.
    Tasks: ${JSON.stringify(tasks)}
    `;

    const res = await model.generateContent(prompt);
    return extractJson(res.response.text());
  }

  // üü¢ Sinh c√¢u ƒë·ªông vi√™n
  async generateMotivation(params: {
    completedTasks: number;
    upcomingTasks: number;
    overdueTasks: number;
  }): Promise<string> {
    const { completedTasks, upcomingTasks, overdueTasks } = params;

    const prompt = `
    B·∫°n l√† tr·ª£ l√Ω AI gi√∫p ƒë·ªông vi√™n ng∆∞·ªùi d√πng.
    Th√¥ng tin:
    - S·ªë task ho√†n th√†nh h√¥m qua: ${completedTasks}
    - Task s·∫Øp t·ªõi h√¥m nay: ${upcomingTasks}
    - Task b·ªã qu√° h·∫°n: ${overdueTasks}

    Vi·∫øt 1 c√¢u ƒë·ªông vi√™n ng·∫Øn (1-2 c√¢u, ti·∫øng Vi·ªát, vui t∆∞∆°i, kh√≠ch l·ªá).
    `;

    const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
    const res = await model.generateContent(prompt);
    return res.response.text().trim() || 'H√¥m nay h√£y l√†m vi·ªác th·∫≠t nƒÉng su·∫•t nh√©!';
  }

  // üü¢ Sinh summary ng·∫Øn g·ªçn
  async generateSummary(plan: { taskId: string; suggestedStart: Date; suggestedEnd: Date; reason: string }[]): Promise<string> {
    if (!plan.length) {
      return 'H√¥m nay b·∫°n kh√¥ng c√≥ task n√†o c·∫ßn l√†m. H√£y t·∫≠n h∆∞·ªüng ng√†y c·ªßa m√¨nh nh√©! üéâ';
    }
    const taskTitles = plan.map(t => `‚Ä¢ ${t.reason}`).join('\n');
    return `H√¥m nay b·∫°n c√≥ ${plan.length} task. ∆Øu ti√™n ch√≠nh: \n${taskTitles}`;
  }
}
