generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model email_reminders {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String    @db.Uuid
  scheduled_time DateTime  @db.Timestamptz(6)
  active         Boolean?  @default(true)
  sent_status    Boolean?  @default(false)
  sent_at        DateTime? @db.Timestamptz(6)
  email_content  Json?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  users          users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reminder_user")
}

model habits {
  id                                            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                       String       @unique @db.Uuid
  most_active_hour_of_day                       Int?
  most_active_day_of_week                       day_of_week?
  completion_rate                               Float?
  average_high_priority_completion_time_minutes Int?
  last_analyzed_at                              DateTime?    @default(now()) @db.Timestamptz(6)
  created_at                                    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at                                    DateTime?    @default(now()) @db.Timestamptz(6)
  users                                         users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_habit_user")
}

model task_insights {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id               String    @db.Uuid
  user_id               String    @db.Uuid
  summary               String?
  motivation            String?
  rewritten_title       String?
  rewritten_description String?
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  tasks                 tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_insight_task")
  users                 users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_insight_user")
}

model tasks {
  id                         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                    String          @db.Uuid
  title                      String
  description                String?
  priority                   priority_level? @default(MEDIUM)
  deadline                   DateTime?       @db.Timestamptz(6)
  status                     task_status?    @default(PENDING)
  tags                       String[]        @default([])
  estimated_duration_minutes Int?
  created_at                 DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?       @default(now()) @db.Timestamptz(6)
  completed_at               DateTime?       @db.Timestamptz(6)
  task_insights              task_insights[]
  users                      users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_user")
}



model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique
  password_hash   String
  name            String?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  email_reminders email_reminders[]
  habits          habits?
  task_insights   task_insights[]
  tasks           tasks[]
}

enum day_of_week {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum priority_level {
  HIGH
  MEDIUM
  LOW
}

enum task_status {
  PENDING
  COMPLETED
  OVERDUE
  CANCELLED
}
